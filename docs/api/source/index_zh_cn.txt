CrackNuts 是一个集成的侧信道分析框架，结合了硬件和软件的协同工作。上位机程序使用 Python 开发，专为 Jupyter 环境优化，提供直观的用户体验，提升操作的便捷性与效率。

本文档介绍了 CrackNuts 上位机程序的架构、功能和 API 接口，以帮助开发人员更高效地使用该程序进行侧信道分析。


`CrackNuts` 上位机抽象出 `Cracker` `Acquisition` 两个概念。
其中 `Cracker` 代表 `CrackNuts` 中的设备，用于对设备进行配置、数据下发、数据采集等操作。
`Acquisition` 代表在 `测试` 或 `运行` 模式下的执行流程，包括：设备配置、数据下方、数据采集等主要流程，详细内容参考 :ref:`acquisition.rst`

`Cracker` 包含了所有对设备的操作，包括设备配置、数据下发采集等。

通用指令代理配置类，定义了通用设备的 `CNP` 通讯代码。详情参考 `CNP` 协议说明。

通用配置对象，包含通用设备的各个配置项目，如果设备有非通用配置，需要继承该类并扩展。

基础设备类，提供 `CNP` 协议支持、配置管理、固件维护等基础操作。

    对于固件更新，在 `Cracker` 架构中，上位机在每次连接设备时都会尝试更新以下目录中的最新的固件文件：
    - 当前安装包所携带：<site-packages>/cracknuts/bin
    - 用户目录: ~/.cracknuts/bin
    - 工作目录：<work-directory>/.bin

    用户可以通过更新`cracknuts`方式获取最新的固件，获取到官网下载最新固件后放置到工作目录或用户目录下即可。


   是否在设备已经正常运行的情况下更新（默认情况下，设备正常运行后不进行固件更新）

   获取默认配置，该方法需要具体的设备类去实现，不同设备有不同的默认配置。